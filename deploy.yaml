AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Trapheus

  Restoration of a RDS instance or cluster from a snapshot using a Lambda state machine.

  '
Globals:
  Function:
    Runtime: python3.7
    Timeout: 900
    Environment:
      Variables:
        Region:
          Fn::Sub: ${AWS::Region}
Parameters:
  vpcId:
    Type: AWS::EC2::VPC::Id
    Description: choose the VPC under which all lambdas will be configured
  Subnets:
    Type: String
    Description: The comma separated list of SubnetIds in your Virtual Private Cloud
      (VPC)
  SenderEmail:
    Type: String
    Description: sender email account for failure alert
  RecipientEmail:
    Type: String
    Description: comma separated list of recipient email ids for failure alerts
  SlackWebhookUrls:
    Type: String
    Default: https://hooks.slack.com
    Description: comma seperated list of slack webhooks for failure alerts
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonRDSFullAccess
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      - arn:aws:iam::aws:policy/AmazonSESFullAccess
      - arn:aws:iam::aws:policy/AmazonVPCReadOnlyAccess
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      - arn:aws:iam::aws:policy/AWSStepFunctionsReadOnlyAccess
      - arn:aws:iam::aws:policy/AWSLambdaExecute
  StatesExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - Fn::Sub: states.${AWS::Region}.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: StatesExecutionPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: '*'
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group added to VPC config of every lambda used
      GroupName: my-sg
      VpcId:
        Ref: vpcId
  CommonLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: lambda-utility
      Description: Dependencies on util methods used in lambdas of the state machine
      ContentUri: s3://com.intuit.demo/3115cde6b5a4c08eea737229df84913a
      CompatibleRuntimes:
      - python3.7
      - python3.6
      LicenseInfo: MIT
  RenameLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-rename-dbinstance
      Description: Lambda functions required to execute rename of a database instance.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/7bcb2f63f92a3b6244534509ba0ec7b5
      Handler: rename_function.lambda_rename_dbinstance
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  DbInstanceStatusLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-get-dbinstance-status-sf
      Description: Lambda function which provides information on status of db instance
        post any operation.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/90ed1cd52d85f2b535b0db6fb165cb16
      Handler: get_dbstatus_function.lambda_get_dbinstance_status
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  DBRestoreLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-restore-dbinstance-sf
      Description: Lambda functions required to execute database restore.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/da23791064b5025058f317a131c34d7a
      Handler: restore_function.lambda_restore_dbinstance
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  DeleteInstanceLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-delete-dbinstance-sf
      Description: Lambda functions required to execute database instance deletion.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/9213f4db604698c6790c3fdcf17d8464
      Handler: delete_function.lambda_delete_dbinstance
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  DBSnapshotLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-dbsnapshot-sf
      Description: Lambda functions required to take snapshot of a database instance.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/ee2047984de7a78b25a4e850000cea95
      Handler: snapshot_function.lambda_create_dbinstance_snapshot
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  EmailAlertLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-send-emailalert-sf
      Description: Lambda functions required to enable alerts in case of any failure
        of state machine.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/75056007a22a01eb9ec072069c3ed6b4
      Handler: email_function.lambda_handler
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
      Environment:
        Variables:
          SenderEmail:
            Fn::Sub: ${SenderEmail}
          RecipientEmail:
            Fn::Sub: ${RecipientEmail}
  SlackAlertLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-send-slackalert-sf
      Description: Lambda functions required to enable slack alerts in case of any
        failure of state machine.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/cb7d49511caec0ccf563819e1d32e4e8
      Handler: slack_notification.lambda_handler
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
      Environment:
        Variables:
          SenderEmail:
            Fn::Sub: ${SlackWebhookUrls}
  ClusterRenameLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-dbcluster-rename-sf
      Description: Lambda functions required to execute database cluster rename.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/7bcb2f63f92a3b6244534509ba0ec7b5
      Handler: cluster_rename_function.lambda_rename_dbcluster
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  ClusterRestoreLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-dbcluster-restore-sf
      Description: Lambda functions required to execute database cluster restore.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/da23791064b5025058f317a131c34d7a
      Handler: cluster_restore_function.lambda_restore_dbcluster
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  ClusterStatusLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-dbcluster-status-sf
      Description: Lambda function which provides information on status of db cluster
        post any operation.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/90ed1cd52d85f2b535b0db6fb165cb16
      Handler: get_dbcluster_status_function.lambda_get_cluster_status
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  ClusterDeleteLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-dbcluster-delete-sf
      Description: Lambda functions required to execute deletion of database cluster.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/9213f4db604698c6790c3fdcf17d8464
      Handler: cluster_delete_function.lambda_delete_dbcluster
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  ClusterSnapshotLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: lambda-function-dbcluster-snapshot-sf
      Description: Lambda functions required to take snapshot of database cluster.
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Runtime: python3.7
      CodeUri: s3://com.intuit.demo/ee2047984de7a78b25a4e850000cea95
      Handler: cluster_snapshot_function.lambda_create_cluster_snapshot
      MemorySize: 128
      Layers:
      - Ref: CommonLambdaLayer
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          Fn::Split:
          - ','
          - Fn::GetAtt:
            - LambdaSecurityGroup
            - GroupId
        SubnetIds:
          Fn::Split:
          - ','
          - Ref: Subnets
  DBRestoreStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        Fn::Sub:
        - "{\n  \"StartAt\": \"ShouldRestoreClusterOrInstance\",\n  \"States\": {\n\
          \    \"ShouldRestoreClusterOrInstance\": {\n      \"Type\": \"Choice\",\n\
          \        \"Choices\": [{\n          \"Variable\": \"$.isCluster\",\n   \
          \       \"BooleanEquals\": false,\n          \"Next\": \"ShouldTakeDbSnapshot\"\
          \n        }],\n        \"Default\": \"ShouldTakeClusterSnapshot\"\n    },\n\
          \    \"ShouldTakeClusterSnapshot\": {\n      \"Type\": \"Choice\",\n   \
          \     \"Choices\": [{\n          \"Variable\": \"$.task\",\n          \"\
          StringEquals\": \"create_snapshot\",\n          \"Next\": \"ClusterSnapshotCreate\"\
          \n        }],\n        \"Default\": \"ClusterRename\"\n    },\n    \"ClusterSnapshotCreate\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ClusterSnapshotLambdaArn}\"\
          ,\n      \"Next\": \"GetClusterSnapshotStatus\",\n      \"ResultPath\":\
          \ \"$.output\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          , \"RetryClusterSnapshotException\"],\n        \"IntervalSeconds\": 10,\n\
          \        \"MaxAttempts\": 5,\n        \"BackoffRate\": 2.0\n       }],\n\
          \      \"Catch\": [\n        {\n          \"ErrorEquals\": [ \"States.ALL\"\
          \ ],\n          \"Next\": \"SendFailureAlert\"\n        }\n      ]\n   \
          \ },\n    \"GetClusterSnapshotStatus\": {\n      \"Type\": \"Task\",\n \
          \     \"Resource\": \"${ClusterStatusLambdaArn}\",\n      \"Next\": \"IsClusterSnapshotAvailable\"\
          ,\n      \"Retry\": [{\n        \"ErrorEquals\": [\"InstanceUnavailableException\"\
          ],\n        \"IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n     \
          \   \"BackoffRate\": 2.0\n       },\n       {\n        \"ErrorEquals\":\
          \ [\"RateExceededException\"],\n        \"IntervalSeconds\": 10,\n     \
          \   \"MaxAttempts\": 5,\n        \"BackoffRate\": 2.0\n       }],\n    \
          \   \"Catch\": [\n        {\n          \"ErrorEquals\": [ \"States.ALL\"\
          \ ],\n          \"Next\": \"SendFailureAlert\"\n        }\n      ]\n   \
          \ },\n    \"IsClusterSnapshotAvailable\": {\n      \"Type\": \"Choice\"\
          ,\n      \"Choices\": [{\n        \"Variable\": \"$.task\",\n        \"\
          StringEquals\": \"TASK_COMPLETE\",\n        \"Next\": \"ClusterRename\"\n\
          \      },\n      {\n        \"Variable\": \"$.task\",\n        \"StringEquals\"\
          : \"TASK_FAILED\",\n        \"Next\": \"SendFailureAlert\"\n      }],\n\
          \      \"Default\": \"GetClusterSnapshotStatus\"\n    },\n    \"ClusterRename\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ClusterRenameLambdaArn}\"\
          ,\n      \"Next\": \"GetClusterStatusPostRename\",\n      \"ResultPath\"\
          : \"$.output\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetClusterStatusPostRename\": {\n  \
          \    \"Type\": \"Task\",\n      \"Resource\": \"${ClusterStatusLambdaArn}\"\
          ,\n      \"Next\": \"IsClusterAvailablePostRename\",\n      \"Retry\": [{\n\
          \        \"ErrorEquals\": [\"InstanceUnavailableException\"],\n        \"\
          IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       },\n       {\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n       \"Catch\": [\n        {\n\
          \          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"\
          SendFailureAlert\"\n        }\n      ]\n    },\n    \"IsClusterAvailablePostRename\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_COMPLETE\",\n        \"\
          Next\": \"RestoreClusterFromSnapshot\"\n      },\n      {\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_FAILED\",\n        \"Next\"\
          : \"SendFailureAlert\"\n      }],\n      \"Default\": \"GetClusterStatusPostRestore\"\
          \n    },\n    \"RestoreClusterFromSnapshot\": {\n      \"Type\": \"Task\"\
          ,\n      \"Resource\": \"${ClusterRestoreLambdaArn}\",\n      \"ResultPath\"\
          : \"$.output\",\n      \"Next\": \"GetClusterStatusPostRestore\",\n    \
          \  \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"],\n\
          \        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n       \
          \ \"BackoffRate\": 2.0\n      }],\n      \"Catch\": [\n        {\n     \
          \     \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetClusterStatusPostRestore\": {\n \
          \     \"Type\": \"Task\",\n      \"Resource\": \"${ClusterStatusLambdaArn}\"\
          ,\n      \"Next\": \"IsClusterAvailablePostRestore\",\n      \"Retry\":\
          \ [{\n        \"ErrorEquals\": [\"InstanceUnavailableException\"],\n   \
          \     \"IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       },\n       {\n        \"ErrorEquals\": [\"RateExceededException\"\
          , \"Lambda.Unknown\"],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\"\
          : 5,\n        \"BackoffRate\": 2.0\n       }],\n       \"Catch\": [\n  \
          \      {\n          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\"\
          : \"SendFailureAlert\"\n        }\n      ]\n    },\n    \"IsClusterAvailablePostRestore\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_COMPLETE\",\n        \"\
          Next\": \"DeleteOriginalCluster\"\n      },\n      {\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_FAILED\",\n        \"Next\"\
          : \"SendFailureAlert\"\n      }],\n      \"Default\": \"GetClusterStatusPostRestore\"\
          \n    },\n    \"DeleteOriginalCluster\": {\n      \"Type\": \"Task\",\n\
          \      \"Resource\": \"${ClusterDeleteLambdaArn}\",\n      \"ResultPath\"\
          : \"$.output\",\n      \"Next\": \"GetClusterStatusPostDelete\",\n     \
          \ \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"],\n\
          \        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n       \
          \ \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n    \
          \      \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetClusterStatusPostDelete\": {\n  \
          \    \"Type\": \"Task\",\n      \"Resource\": \"${ClusterStatusLambdaArn}\"\
          ,\n      \"Next\": \"isClusterDeleted\",\n      \"Retry\": [{\n        \"\
          ErrorEquals\": [\"RateExceededException\"],\n        \"IntervalSeconds\"\
          : 10,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\": 2.0\n     \
          \ }],\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [ \"States.ALL\"\
          \ ],\n          \"Next\": \"SendFailureAlert\"\n        }\n      ]\n   \
          \ },\n    \"isClusterDeleted\": {\n      \"Type\": \"Choice\",\n      \"\
          Choices\": [{\n        \"Variable\": \"$.task\",\n        \"StringEquals\"\
          : \"TASK_COMPLETE\",\n        \"Next\": \"RestorePipelineComplete\"\n  \
          \    },\n      {\n        \"Variable\": \"$.task\",\n        \"StringEquals\"\
          : \"TASK_FAILED\",\n        \"Next\": \"SendFailureAlert\"\n      }],\n\
          \      \"Default\": \"GetClusterStatusPostDelete\"\n    },\n    \"RevertOldClusterRename\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ClusterRenameLambdaArn}\"\
          ,\n      \"Next\": \"GetClusterStatusPostRenameRevert\",\n      \"ResultPath\"\
          : \"$.output\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetClusterStatusPostRenameRevert\":\
          \ {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ClusterStatusLambdaArn}\"\
          ,\n      \"Next\": \"RestorePipelineComplete\",\n      \"Retry\": [{\n \
          \       \"ErrorEquals\": [\"InstanceUnavailableException\"],\n        \"\
          IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       },\n       {\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n       \"Catch\": [\n        {\n\
          \          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"\
          SendFailureAlert\"\n        }\n      ]\n    },\n    \"ShouldTakeDbSnapshot\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"create_snapshot\",\n        \"\
          Next\": \"DbSnapshotCreate\"\n      }],\n      \"Default\": \"DbInstanceRename\"\
          \n    },\n    \"DbSnapshotCreate\": {\n      \"Type\": \"Task\",\n     \
          \ \"Resource\": \"${DBSnapshotLambdaArn}\",\n      \"Next\": \"GetDbSnapshotStatus\"\
          ,\n      \"ResultPath\": \"$.output\",\n      \"Retry\": [{\n        \"\
          ErrorEquals\": [\"RateExceededException\", \"RetryDBSnapshotException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetDbSnapshotStatus\": {\n      \"Type\"\
          : \"Task\",\n      \"Resource\": \"${DBStatusLambdaArn}\",\n      \"Next\"\
          : \"IsDbSnapshotAvailable\",\n      \"Retry\": [{\n        \"ErrorEquals\"\
          : [\"InstanceUnavailableException\"],\n        \"IntervalSeconds\": 5,\n\
          \        \"MaxAttempts\": 5,\n        \"BackoffRate\": 2.0\n       },\n\
          \       {\n        \"ErrorEquals\": [\"RateExceededException\"],\n     \
          \   \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       }],\n       \"Catch\": [\n        {\n          \"ErrorEquals\"\
          : [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\n      \
          \  }\n      ]\n    },\n    \"IsDbSnapshotAvailable\": {\n      \"Type\"\
          : \"Choice\",\n      \"Choices\": [{\n        \"Variable\": \"$.task\",\n\
          \        \"StringEquals\": \"TASK_COMPLETE\",\n        \"Next\": \"DbInstanceRename\"\
          \n      },\n      {\n        \"Variable\": \"$.task\",\n        \"StringEquals\"\
          : \"TASK_FAILED\",\n        \"Next\": \"SendFailureAlert\"\n      }],\n\
          \      \"Default\": \"GetDbSnapshotStatus\"\n    },\n    \"DbInstanceRename\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DBRenameLambdaArn}\"\
          ,\n      \"Next\": \"GetDbInstanceStatusPostRename\",\n      \"ResultPath\"\
          : \"$.output\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetDbInstanceStatusPostRename\": {\n\
          \      \"Type\": \"Task\",\n      \"Resource\": \"${DBStatusLambdaArn}\"\
          ,\n      \"Next\": \"IsDbInstanceAvailablePostRename\",\n      \"Retry\"\
          : [{\n        \"ErrorEquals\": [\"InstanceUnavailableException\"],\n   \
          \     \"IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       },\n       {\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n       \"Catch\": [\n        {\n\
          \          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"\
          SendFailureAlert\"\n        }\n      ]\n    },\n    \"IsDbInstanceAvailablePostRename\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_COMPLETE\",\n        \"\
          Next\": \"RestoreDbInstanceFromSnapshot\"\n      },\n      {\n        \"\
          Variable\": \"$.task\",\n        \"StringEquals\": \"TASK_FAILED\",\n  \
          \      \"Next\": \"SendFailureAlert\"\n      }],\n      \"Default\": \"\
          GetDbInstanceStatusPostRename\"\n    },\n    \"RestoreDbInstanceFromSnapshot\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DBRestoreLambdaArn}\"\
          ,\n      \"ResultPath\": \"$.output\",\n      \"Next\": \"GetDbInstanceStatusPostRestore\"\
          ,\n       \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetDbInstanceStatusPostRestore\": {\n\
          \      \"Type\": \"Task\",\n      \"Resource\": \"${DBStatusLambdaArn}\"\
          ,\n      \"Next\": \"IsDbInstanceAvailablePostRestore\",\n      \"Retry\"\
          : [{\n        \"ErrorEquals\": [\"InstanceUnavailableException\"],\n   \
          \     \"IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       },\n       {\n        \"ErrorEquals\": [\"RateExceededException\"\
          , \"Lambda.Unknown\"],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\"\
          : 5,\n        \"BackoffRate\": 2.0\n       }],\n       \"Catch\": [\n  \
          \      {\n          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\"\
          : \"SendFailureAlert\"\n        }\n      ]\n    },\n    \"IsDbInstanceAvailablePostRestore\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_COMPLETE\",\n        \"\
          Next\": \"DeleteOriginalDbInstance\"\n      },\n      {\n        \"Variable\"\
          : \"$.task\",\n        \"StringEquals\": \"TASK_FAILED\",\n        \"Next\"\
          : \"SendFailureAlert\"\n      }],\n      \"Default\": \"GetDbInstanceStatusPostRestore\"\
          \n    },\n    \"DeleteOriginalDbInstance\": {\n      \"Type\": \"Task\"\
          ,\n      \"Resource\": \"${DBDeleteLambdaArn}\",\n      \"ResultPath\":\
          \ \"$.output\",\n      \"Next\": \"GetDbInstanceStatusPostDelete\",\n  \
          \    \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetDbInstanceStatusPostDelete\": {\n\
          \      \"Type\": \"Task\",\n      \"Resource\": \"${DBStatusLambdaArn}\"\
          ,\n      \"Next\": \"isDbInstanceDeleted\",\n      \"Retry\": [{\n     \
          \   \"ErrorEquals\": [\"RateExceededException\"],\n        \"IntervalSeconds\"\
          : 10,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\": 2.0\n     \
          \ }],\n      \"Catch\": [\n        {\n          \"ErrorEquals\": [ \"States.ALL\"\
          \ ],\n          \"Next\": \"SendFailureAlert\"\n        }\n      ]\n   \
          \ },\n    \"isDbInstanceDeleted\": {\n      \"Type\": \"Choice\",\n    \
          \  \"Choices\": [{\n        \"Variable\": \"$.task\",\n        \"StringEquals\"\
          : \"TASK_COMPLETE\",\n        \"Next\": \"RestorePipelineComplete\"\n  \
          \    },\n      {\n        \"Variable\": \"$.task\",\n        \"StringEquals\"\
          : \"TASK_FAILED\",\n        \"Next\": \"SendFailureAlert\"\n      }],\n\
          \      \"Default\": \"GetDbInstanceStatusPostDelete\"\n    },\n    \"SendFailureAlert\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${EmailAlertLambdaArn}\"\
          ,\n      \"Next\": \"CheckForRenameReversal\"\n    },\n    \"CheckForRenameReversal\"\
          : {\n      \"Type\": \"Choice\",\n      \"Choices\": [{\n        \"Variable\"\
          : \"$.Error\",\n        \"StringEquals\": \"InstanceRestoreException\",\n\
          \        \"Next\": \"RevertOldInstanceRename\"\n      },\n      {\n    \
          \    \"Variable\": \"$.Error\",\n        \"StringEquals\": \"ClusterRestoreException\"\
          ,\n        \"Next\": \"RevertOldClusterRename\"\n      }],\n      \"Default\"\
          : \"RestorePipelineComplete\"\n    },\n    \"RevertOldInstanceRename\":\
          \ {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DBRenameLambdaArn}\"\
          ,\n      \"Next\": \"GetDbInstanceStatusPostRenameRevert\",\n      \"ResultPath\"\
          : \"$.output\",\n      \"Retry\": [{\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n      \"Catch\": [\n        {\n \
          \         \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"SendFailureAlert\"\
          \n        }\n      ]\n    },\n    \"GetDbInstanceStatusPostRenameRevert\"\
          : {\n      \"Type\": \"Task\",\n      \"Resource\": \"${DBStatusLambdaArn}\"\
          ,\n      \"Next\": \"RestorePipelineComplete\",\n      \"Retry\": [{\n \
          \       \"ErrorEquals\": [\"InstanceUnavailableException\"],\n        \"\
          IntervalSeconds\": 5,\n        \"MaxAttempts\": 5,\n        \"BackoffRate\"\
          : 2.0\n       },\n       {\n        \"ErrorEquals\": [\"RateExceededException\"\
          ],\n        \"IntervalSeconds\": 10,\n        \"MaxAttempts\": 5,\n    \
          \    \"BackoffRate\": 2.0\n       }],\n       \"Catch\": [\n        {\n\
          \          \"ErrorEquals\": [ \"States.ALL\" ],\n          \"Next\": \"\
          SendFailureAlert\"\n        }\n      ]\n    },\n    \"RestorePipelineComplete\"\
          : {\n       \"Type\": \"Pass\",\n       \"End\": true\n    }\n  }\n}"
        - ClusterRenameLambdaArn:
            Fn::GetAtt:
            - ClusterRenameLambdaFunction
            - Arn
          ClusterStatusLambdaArn:
            Fn::GetAtt:
            - ClusterStatusLambdaFunction
            - Arn
          ClusterSnapshotLambdaArn:
            Fn::GetAtt:
            - ClusterSnapshotLambdaFunction
            - Arn
          ClusterRestoreLambdaArn:
            Fn::GetAtt:
            - ClusterRestoreLambdaFunction
            - Arn
          ClusterDeleteLambdaArn:
            Fn::GetAtt:
            - ClusterDeleteLambdaFunction
            - Arn
          DBRenameLambdaArn:
            Fn::GetAtt:
            - RenameLambdaFunction
            - Arn
          DBStatusLambdaArn:
            Fn::GetAtt:
            - DbInstanceStatusLambdaFunction
            - Arn
          DBSnapshotLambdaArn:
            Fn::GetAtt:
            - DBSnapshotLambdaFunction
            - Arn
          DBRestoreLambdaArn:
            Fn::GetAtt:
            - DBRestoreLambdaFunction
            - Arn
          DBDeleteLambdaArn:
            Fn::GetAtt:
            - DeleteInstanceLambdaFunction
            - Arn
          EmailAlertLambdaArn:
            Fn::GetAtt:
            - EmailAlertLambdaFunction
            - Arn
      RoleArn:
        Fn::GetAtt:
        - StatesExecutionRole
        - Arn
